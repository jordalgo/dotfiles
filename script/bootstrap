#!/usr/bin/env bash
#
# bootstrap installs things.


# Helper Functions
info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

install_vundle () {
  if [ ! -d $HOME/.dotfiles/vim/bundle/vundle ]; then
    info 'Cloning Vundle'
    echo '\n'
    git clone git://github.com/gmarik/vundle.git vim/bundle/vundle
    success 'Ok'
  else
    success 'Vundle Exists, Skipping the Git Clone'
  fi
}

link_vim_folder () {
  if [ ! -d $HOME/.vim ]; then
    ln -s $HOME/.dotfiles/vim $HOME/.vim
    success 'Linked Vim Folder'
  else
    info 'Vim folder already exists'
  fi
}

download_vim_plugins () {
  if test $(which mvim)
  then
    mvim -v +PluginInstall +qall
  else
    if test $(which vim)
    then
      vim +PluginInstall +qall
    else
      fail 'mvim or vim not found in path.'
    fi
  fi
  success 'Vim Plugins Installed.'
}

clone_omz () {
  if [ ! -d $HOME/.oh-my-zsh ]; then
    git clone git://github.com/robbyrussell/oh-my-zsh.git $HOME/.oh-my-zsh
    chsh -s /bin/zsh
    success 'Zsh set and oh-my-zsh installed.'
  else
    success 'Skipping Oh My Zsh clone.\n'
  fi
}

# Here we go!
# navigates up one level to the dotfiles root
cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd)

set -e

echo ''
install_dotfiles
link_vim_folder
install_vundle
download_vim_plugins
clone_omz

echo ''
echo 'All installed!'
